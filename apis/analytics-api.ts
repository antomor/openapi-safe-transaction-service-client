/* tslint:disable */
/* eslint-disable */
/**
 * Gnosis Safe Transaction Service API
 * API to keep track of transactions sent via Gnosis Safe smart contracts
 *
 * OpenAPI spec version: v1
 * Contact: safe@gnosis.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { AnalyticsMultisigTxsByOriginResponse } from '../models';
import { InlineResponse200 } from '../models';
import { URLSearchParams, URL } from 'url';
/**
 * AnalyticsApi - axios parameter creator
 * @export
 */
export const AnalyticsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [safe] 
         * @param {string} [to] 
         * @param {number} [valueLt] 
         * @param {number} [valueGt] 
         * @param {number} [valueLte] 
         * @param {number} [valueGte] 
         * @param {number} [value] 
         * @param {string} [operation] 
         * @param {string} [failed] 
         * @param {number} [safeTxGasLt] 
         * @param {number} [safeTxGasGt] 
         * @param {number} [safeTxGasLte] 
         * @param {number} [safeTxGasGte] 
         * @param {number} [safeTxGas] 
         * @param {number} [baseGasLt] 
         * @param {number} [baseGasGt] 
         * @param {number} [baseGasLte] 
         * @param {number} [baseGasGte] 
         * @param {number} [baseGas] 
         * @param {number} [gasPriceLt] 
         * @param {number} [gasPriceGt] 
         * @param {number} [gasPriceLte] 
         * @param {number} [gasPriceGte] 
         * @param {number} [gasPrice] 
         * @param {string} [gasToken] 
         * @param {string} [refundReceiver] 
         * @param {string} [trusted] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsMultisigTransactionsByOriginList: async (safe?: string, to?: string, valueLt?: number, valueGt?: number, valueLte?: number, valueGte?: number, value?: number, operation?: string, failed?: string, safeTxGasLt?: number, safeTxGasGt?: number, safeTxGasLte?: number, safeTxGasGte?: number, safeTxGas?: number, baseGasLt?: number, baseGasGt?: number, baseGasLte?: number, baseGasGte?: number, baseGas?: number, gasPriceLt?: number, gasPriceGt?: number, gasPriceLte?: number, gasPriceGte?: number, gasPrice?: number, gasToken?: string, refundReceiver?: string, trusted?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/analytics/multisig-transactions/by-origin/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required

            if (safe !== undefined) {
                localVarQueryParameter['safe'] = safe;
            }

            if (to !== undefined) {
                localVarQueryParameter['to'] = to;
            }

            if (valueLt !== undefined) {
                localVarQueryParameter['value__lt'] = valueLt;
            }

            if (valueGt !== undefined) {
                localVarQueryParameter['value__gt'] = valueGt;
            }

            if (valueLte !== undefined) {
                localVarQueryParameter['value__lte'] = valueLte;
            }

            if (valueGte !== undefined) {
                localVarQueryParameter['value__gte'] = valueGte;
            }

            if (value !== undefined) {
                localVarQueryParameter['value'] = value;
            }

            if (operation !== undefined) {
                localVarQueryParameter['operation'] = operation;
            }

            if (failed !== undefined) {
                localVarQueryParameter['failed'] = failed;
            }

            if (safeTxGasLt !== undefined) {
                localVarQueryParameter['safe_tx_gas__lt'] = safeTxGasLt;
            }

            if (safeTxGasGt !== undefined) {
                localVarQueryParameter['safe_tx_gas__gt'] = safeTxGasGt;
            }

            if (safeTxGasLte !== undefined) {
                localVarQueryParameter['safe_tx_gas__lte'] = safeTxGasLte;
            }

            if (safeTxGasGte !== undefined) {
                localVarQueryParameter['safe_tx_gas__gte'] = safeTxGasGte;
            }

            if (safeTxGas !== undefined) {
                localVarQueryParameter['safe_tx_gas'] = safeTxGas;
            }

            if (baseGasLt !== undefined) {
                localVarQueryParameter['base_gas__lt'] = baseGasLt;
            }

            if (baseGasGt !== undefined) {
                localVarQueryParameter['base_gas__gt'] = baseGasGt;
            }

            if (baseGasLte !== undefined) {
                localVarQueryParameter['base_gas__lte'] = baseGasLte;
            }

            if (baseGasGte !== undefined) {
                localVarQueryParameter['base_gas__gte'] = baseGasGte;
            }

            if (baseGas !== undefined) {
                localVarQueryParameter['base_gas'] = baseGas;
            }

            if (gasPriceLt !== undefined) {
                localVarQueryParameter['gas_price__lt'] = gasPriceLt;
            }

            if (gasPriceGt !== undefined) {
                localVarQueryParameter['gas_price__gt'] = gasPriceGt;
            }

            if (gasPriceLte !== undefined) {
                localVarQueryParameter['gas_price__lte'] = gasPriceLte;
            }

            if (gasPriceGte !== undefined) {
                localVarQueryParameter['gas_price__gte'] = gasPriceGte;
            }

            if (gasPrice !== undefined) {
                localVarQueryParameter['gas_price'] = gasPrice;
            }

            if (gasToken !== undefined) {
                localVarQueryParameter['gas_token'] = gasToken;
            }

            if (refundReceiver !== undefined) {
                localVarQueryParameter['refund_receiver'] = refundReceiver;
            }

            if (trusted !== undefined) {
                localVarQueryParameter['trusted'] = trusted;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [masterCopy] 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsMultisigTransactionsBySafeList: async (masterCopy?: string, limit?: number, offset?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/analytics/multisig-transactions/by-safe/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required

            if (masterCopy !== undefined) {
                localVarQueryParameter['master_copy'] = masterCopy;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AnalyticsApi - functional programming interface
 * @export
 */
export const AnalyticsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [safe] 
         * @param {string} [to] 
         * @param {number} [valueLt] 
         * @param {number} [valueGt] 
         * @param {number} [valueLte] 
         * @param {number} [valueGte] 
         * @param {number} [value] 
         * @param {string} [operation] 
         * @param {string} [failed] 
         * @param {number} [safeTxGasLt] 
         * @param {number} [safeTxGasGt] 
         * @param {number} [safeTxGasLte] 
         * @param {number} [safeTxGasGte] 
         * @param {number} [safeTxGas] 
         * @param {number} [baseGasLt] 
         * @param {number} [baseGasGt] 
         * @param {number} [baseGasLte] 
         * @param {number} [baseGasGte] 
         * @param {number} [baseGas] 
         * @param {number} [gasPriceLt] 
         * @param {number} [gasPriceGt] 
         * @param {number} [gasPriceLte] 
         * @param {number} [gasPriceGte] 
         * @param {number} [gasPrice] 
         * @param {string} [gasToken] 
         * @param {string} [refundReceiver] 
         * @param {string} [trusted] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async analyticsMultisigTransactionsByOriginList(safe?: string, to?: string, valueLt?: number, valueGt?: number, valueLte?: number, valueGte?: number, value?: number, operation?: string, failed?: string, safeTxGasLt?: number, safeTxGasGt?: number, safeTxGasLte?: number, safeTxGasGte?: number, safeTxGas?: number, baseGasLt?: number, baseGasGt?: number, baseGasLte?: number, baseGasGte?: number, baseGas?: number, gasPriceLt?: number, gasPriceGt?: number, gasPriceLte?: number, gasPriceGte?: number, gasPrice?: number, gasToken?: string, refundReceiver?: string, trusted?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AnalyticsMultisigTxsByOriginResponse>>> {
            const localVarAxiosArgs = await AnalyticsApiAxiosParamCreator(configuration).analyticsMultisigTransactionsByOriginList(safe, to, valueLt, valueGt, valueLte, valueGte, value, operation, failed, safeTxGasLt, safeTxGasGt, safeTxGasLte, safeTxGasGte, safeTxGas, baseGasLt, baseGasGt, baseGasLte, baseGasGte, baseGas, gasPriceLt, gasPriceGt, gasPriceLte, gasPriceGte, gasPrice, gasToken, refundReceiver, trusted, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} [masterCopy] 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async analyticsMultisigTransactionsBySafeList(masterCopy?: string, limit?: number, offset?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>> {
            const localVarAxiosArgs = await AnalyticsApiAxiosParamCreator(configuration).analyticsMultisigTransactionsBySafeList(masterCopy, limit, offset, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AnalyticsApi - factory interface
 * @export
 */
export const AnalyticsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {string} [safe] 
         * @param {string} [to] 
         * @param {number} [valueLt] 
         * @param {number} [valueGt] 
         * @param {number} [valueLte] 
         * @param {number} [valueGte] 
         * @param {number} [value] 
         * @param {string} [operation] 
         * @param {string} [failed] 
         * @param {number} [safeTxGasLt] 
         * @param {number} [safeTxGasGt] 
         * @param {number} [safeTxGasLte] 
         * @param {number} [safeTxGasGte] 
         * @param {number} [safeTxGas] 
         * @param {number} [baseGasLt] 
         * @param {number} [baseGasGt] 
         * @param {number} [baseGasLte] 
         * @param {number} [baseGasGte] 
         * @param {number} [baseGas] 
         * @param {number} [gasPriceLt] 
         * @param {number} [gasPriceGt] 
         * @param {number} [gasPriceLte] 
         * @param {number} [gasPriceGte] 
         * @param {number} [gasPrice] 
         * @param {string} [gasToken] 
         * @param {string} [refundReceiver] 
         * @param {string} [trusted] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsMultisigTransactionsByOriginList(safe?: string, to?: string, valueLt?: number, valueGt?: number, valueLte?: number, valueGte?: number, value?: number, operation?: string, failed?: string, safeTxGasLt?: number, safeTxGasGt?: number, safeTxGasLte?: number, safeTxGasGte?: number, safeTxGas?: number, baseGasLt?: number, baseGasGt?: number, baseGasLte?: number, baseGasGte?: number, baseGas?: number, gasPriceLt?: number, gasPriceGt?: number, gasPriceLte?: number, gasPriceGte?: number, gasPrice?: number, gasToken?: string, refundReceiver?: string, trusted?: string, options?: any): AxiosPromise<Array<AnalyticsMultisigTxsByOriginResponse>> {
            return AnalyticsApiFp(configuration).analyticsMultisigTransactionsByOriginList(safe, to, valueLt, valueGt, valueLte, valueGte, value, operation, failed, safeTxGasLt, safeTxGasGt, safeTxGasLte, safeTxGasGte, safeTxGas, baseGasLt, baseGasGt, baseGasLte, baseGasGte, baseGas, gasPriceLt, gasPriceGt, gasPriceLte, gasPriceGte, gasPrice, gasToken, refundReceiver, trusted, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [masterCopy] 
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsMultisigTransactionsBySafeList(masterCopy?: string, limit?: number, offset?: number, options?: any): AxiosPromise<InlineResponse200> {
            return AnalyticsApiFp(configuration).analyticsMultisigTransactionsBySafeList(masterCopy, limit, offset, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AnalyticsApi - object-oriented interface
 * @export
 * @class AnalyticsApi
 * @extends {BaseAPI}
 */
export class AnalyticsApi extends BaseAPI {
    /**
     * 
     * @param {string} [safe] 
     * @param {string} [to] 
     * @param {number} [valueLt] 
     * @param {number} [valueGt] 
     * @param {number} [valueLte] 
     * @param {number} [valueGte] 
     * @param {number} [value] 
     * @param {string} [operation] 
     * @param {string} [failed] 
     * @param {number} [safeTxGasLt] 
     * @param {number} [safeTxGasGt] 
     * @param {number} [safeTxGasLte] 
     * @param {number} [safeTxGasGte] 
     * @param {number} [safeTxGas] 
     * @param {number} [baseGasLt] 
     * @param {number} [baseGasGt] 
     * @param {number} [baseGasLte] 
     * @param {number} [baseGasGte] 
     * @param {number} [baseGas] 
     * @param {number} [gasPriceLt] 
     * @param {number} [gasPriceGt] 
     * @param {number} [gasPriceLte] 
     * @param {number} [gasPriceGte] 
     * @param {number} [gasPrice] 
     * @param {string} [gasToken] 
     * @param {string} [refundReceiver] 
     * @param {string} [trusted] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApi
     */
    public analyticsMultisigTransactionsByOriginList(safe?: string, to?: string, valueLt?: number, valueGt?: number, valueLte?: number, valueGte?: number, value?: number, operation?: string, failed?: string, safeTxGasLt?: number, safeTxGasGt?: number, safeTxGasLte?: number, safeTxGasGte?: number, safeTxGas?: number, baseGasLt?: number, baseGasGt?: number, baseGasLte?: number, baseGasGte?: number, baseGas?: number, gasPriceLt?: number, gasPriceGt?: number, gasPriceLte?: number, gasPriceGte?: number, gasPrice?: number, gasToken?: string, refundReceiver?: string, trusted?: string, options?: any) {
        return AnalyticsApiFp(this.configuration).analyticsMultisigTransactionsByOriginList(safe, to, valueLt, valueGt, valueLte, valueGte, value, operation, failed, safeTxGasLt, safeTxGasGt, safeTxGasLte, safeTxGasGte, safeTxGas, baseGasLt, baseGasGt, baseGasLte, baseGasGte, baseGas, gasPriceLt, gasPriceGt, gasPriceLte, gasPriceGte, gasPrice, gasToken, refundReceiver, trusted, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} [masterCopy] 
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApi
     */
    public analyticsMultisigTransactionsBySafeList(masterCopy?: string, limit?: number, offset?: number, options?: any) {
        return AnalyticsApiFp(this.configuration).analyticsMultisigTransactionsBySafeList(masterCopy, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }
}
