/* tslint:disable */
/* eslint-disable */
/**
 * Gnosis Safe Transaction Service API
 * API to keep track of transactions sent via Gnosis Safe smart contracts
 *
 * OpenAPI spec version: v1
 * Contact: safe@gnosis.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { InlineResponse2006 } from '../models';
import { TokenInfoResponse } from '../models';
import { URLSearchParams, URL } from 'url';

/**
 * TokensApi - axios parameter creator
 * @export
 */
export const TokensApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [name] 
         * @param {string} [address] 
         * @param {string} [symbol] 
         * @param {number} [decimalsLt] 
         * @param {number} [decimalsGt] 
         * @param {number} [decimals] 
         * @param {string} [search] A search term.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tokensList: async (name?: string, address?: string, symbol?: string, decimalsLt?: number, decimalsGt?: number, decimals?: number, search?: string, ordering?: string, limit?: number, offset?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/tokens/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (address !== undefined) {
                localVarQueryParameter['address'] = address;
            }

            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (decimalsLt !== undefined) {
                localVarQueryParameter['decimals__lt'] = decimalsLt;
            }

            if (decimalsGt !== undefined) {
                localVarQueryParameter['decimals__gt'] = decimalsGt;
            }

            if (decimals !== undefined) {
                localVarQueryParameter['decimals'] = decimals;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} address A unique value identifying this token.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tokensRead: async (address: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'address' is not null or undefined
            if (address === null || address === undefined) {
                throw new RequiredError('address','Required parameter address was null or undefined when calling tokensRead.');
            }
            const localVarPath = `/tokens/{address}/`
                .replace(`{${"address"}}`, encodeURIComponent(String(address)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TokensApi - functional programming interface
 * @export
 */
export const TokensApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [name] 
         * @param {string} [address] 
         * @param {string} [symbol] 
         * @param {number} [decimalsLt] 
         * @param {number} [decimalsGt] 
         * @param {number} [decimals] 
         * @param {string} [search] A search term.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tokensList(name?: string, address?: string, symbol?: string, decimalsLt?: number, decimalsGt?: number, decimals?: number, search?: string, ordering?: string, limit?: number, offset?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2006>> {
            const localVarAxiosArgs = await TokensApiAxiosParamCreator(configuration).tokensList(name, address, symbol, decimalsLt, decimalsGt, decimals, search, ordering, limit, offset, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} address A unique value identifying this token.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tokensRead(address: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenInfoResponse>> {
            const localVarAxiosArgs = await TokensApiAxiosParamCreator(configuration).tokensRead(address, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * TokensApi - factory interface
 * @export
 */
export const TokensApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {string} [name] 
         * @param {string} [address] 
         * @param {string} [symbol] 
         * @param {number} [decimalsLt] 
         * @param {number} [decimalsGt] 
         * @param {number} [decimals] 
         * @param {string} [search] A search term.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tokensList(name?: string, address?: string, symbol?: string, decimalsLt?: number, decimalsGt?: number, decimals?: number, search?: string, ordering?: string, limit?: number, offset?: number, options?: any): AxiosPromise<InlineResponse2006> {
            return TokensApiFp(configuration).tokensList(name, address, symbol, decimalsLt, decimalsGt, decimals, search, ordering, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} address A unique value identifying this token.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tokensRead(address: string, options?: any): AxiosPromise<TokenInfoResponse> {
            return TokensApiFp(configuration).tokensRead(address, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TokensApi - object-oriented interface
 * @export
 * @class TokensApi
 * @extends {BaseAPI}
 */
export class TokensApi extends BaseAPI {
    /**
     * 
     * @param {string} [name] 
     * @param {string} [address] 
     * @param {string} [symbol] 
     * @param {number} [decimalsLt] 
     * @param {number} [decimalsGt] 
     * @param {number} [decimals] 
     * @param {string} [search] A search term.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokensApi
     */
    public tokensList(name?: string, address?: string, symbol?: string, decimalsLt?: number, decimalsGt?: number, decimals?: number, search?: string, ordering?: string, limit?: number, offset?: number, options?: any) {
        return TokensApiFp(this.configuration).tokensList(name, address, symbol, decimalsLt, decimalsGt, decimals, search, ordering, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} address A unique value identifying this token.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokensApi
     */
    public tokensRead(address: string, options?: any) {
        return TokensApiFp(this.configuration).tokensRead(address, options).then((request) => request(this.axios, this.basePath));
    }
}
